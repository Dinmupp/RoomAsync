@using Domain.User.UseCases
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject LoginUseCase LoginUseCase

<h3>Login</h3>

@if (HttpContextAccessor.HttpContext?.User?.Identity?.IsAuthenticated == true)
{
    <p>Welcome, @HttpContextAccessor.HttpContext.User.Identity.Name!</p>
    <button @onclick="Logout">Logout</button>
}
else
{
    <p>Please log in to access the system.</p>
    <form @onsubmit="HandleLogin">
        <input type="text" @bind="Username" placeholder="Username" />
        <input type="password" @bind="Password" placeholder="Password" />
        <button type="submit">Login</button>
    </form>
}

@code {
    private string Username { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;

    private async Task HandleLogin()
    {
        var sessionId = await LoginUseCase.ExecuteAsync(Username, Password);
        // Store sessionId in browser storage or cookies (JWT or session management).
        NavigationManager.NavigateTo("/", true);
    }

    private void Logout()
    {
        NavigationManager.NavigateTo("signout-oidc", true);
    }
}