@using RoomAsync.Web.ApiService.Authentication;
@using RoomAsync.Web.Web.Authentication
@using System.ComponentModel.DataAnnotations

@page "/login"
@inject LoginService LoginService
@inject NavigationManager NavigationManager
@inject IAuthService AuthService


<PageTitle>Login</PageTitle>

<h3>Login</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    [CascadingParameter] public CancellationToken AppCancellationToken { get; set; }

    private LoginModel loginModel = new();
    private string ErrorMessage = string.Empty;

    private async Task HandleLogin()
    {
        try
        {
            var useContext = await LoginService.LoginAsync(loginModel.Username, loginModel.Password, AppCancellationToken);

            if (useContext != null)
            {
                await AuthService.SaveTokenAsync(useContext.Token);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ErrorMessage = "Login failed. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Login error: {ex.Message}";
        }
    }

    public class LoginModel
    {
        [Required]
        public string Username { get; set; } = string.Empty;
        [Required]
        public string Password { get; set; } = string.Empty;
    }
}